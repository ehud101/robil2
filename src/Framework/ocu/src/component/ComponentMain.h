
/*
 * ComponentMain.h
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#ifndef COMPONENTMAIN_H_
#define COMPONENTMAIN_H_
#include <std_msgs/String.h>
#include <ParameterTypes.h>
#include <tf/tf.h>
class RosComm;
class ComponentMain {
	RosComm* _roscomm;
public:
	ComponentMain(int argc,char** argv);
	virtual ~ComponentMain();
	void handleOdometry(const config::OCU::sub::Odometry& msg);
	void handleBladPosition(const config::OCU::sub::BladPosition& msg);
	void handleMap(const config::OCU::sub::Map& msg);
	void handleWPDDecisions(const config::OCU::sub::WPDDecisions& msg);
	void handleLocalPath(const config::OCU::sub::LocalPath& msg);
	void handleIEDDetectionEvent(const config::OCU::sub::IEDDetectionEvent& msg);
	void handlePlatformState(const config::OCU::sub::PlatformState& msg);
	void handleSoftwareState(const config::OCU::sub::SoftwareState& msg);
	void handleSensorsState(const config::OCU::sub::SensorsState& msg);
	void handleSMMEMissionState(const config::OCU::sub::SMMEMissionState& msg);
	void handleMissionAcceptance(const config::OCU::sub::MissionAcceptance& msg);
	void publishPositionUpdate(config::OCU::pub::PositionUpdate& msg);
	void publishSMMECommand(config::OCU::pub::SMMECommand& msg);
	void publishSMMEControlMode(config::OCU::pub::SMMEControlMode& msg);
	void publishNavigationTask(config::OCU::pub::NavigationTask& msg);
	void publishManipulationTask(config::OCU::pub::ManipulationTask& msg);
	void publishMissionTask(config::OCU::pub::MissionTask& msg);
	void publishCustomPath(config::OCU::pub::CustomPath& msg);
	void publishTeleoperationControlMode(config::OCU::pub::TeleoperationControlMode& msg);
	void publishTeleoperationThrottle(config::OCU::pub::TeleoperationThrottle& msg);
	void publishTeleoperationSteering(config::OCU::pub::TeleoperationSteering& msg);
	void publishTeleoperationJoints(config::OCU::pub::TeleoperationJoints& msg);
	void publishIEDDetectionEvent(config::OCU::pub::IEDDetectionEvent& msg);
	void publishIEDLocation(config::OCU::pub::IEDLocation& msg);
  void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
  tf::StampedTransform getLastTrasform(std::string srcFrame, std::string distFrame);
};
#endif /* COMPONENTMAIN_H_ */
