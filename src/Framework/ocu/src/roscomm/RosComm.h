
/*
 * RosComm.h
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#ifndef ROSCOMM_H_
#define ROSCOMM_H_
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <ParameterTypes.h>
#include <tf/tf.h>
class ComponentMain;
class RosComm {
  bool _inited;
  ComponentMain   * _comp;
  ros::NodeHandle _nh;
	ros::Subscriber _sub_Odometry;
	ros::Subscriber _sub_BladPosition;
	ros::Subscriber _sub_Map;
	ros::Subscriber _sub_WPDDecisions;
	ros::Subscriber _sub_LocalPath;
	ros::Subscriber _sub_IEDDetectionEvent;
	ros::Subscriber _sub_PlatformState;
	ros::Subscriber _sub_SoftwareState;
	ros::Subscriber _sub_SensorsState;
	ros::Subscriber _sub_SMMEMissionState;
	ros::Subscriber _sub_MissionAcceptance;
	ros::Publisher  _pub_PositionUpdate;
	ros::Publisher  _pub_SMMECommand;
	ros::Publisher  _pub_SMMEControlMode;
	ros::Publisher  _pub_NavigationTask;
	ros::Publisher  _pub_ManipulationTask;
	ros::Publisher  _pub_MissionTask;
	ros::Publisher  _pub_CustomPath;
	ros::Publisher  _pub_TeleoperationControlMode;
	ros::Publisher  _pub_TeleoperationThrottle;
	ros::Publisher  _pub_TeleoperationSteering;
	ros::Publisher  _pub_TeleoperationJoints;
	ros::Publisher  _pub_IEDDetectionEvent;
	ros::Publisher  _pub_IEDLocation;

  bool init(int argc,char** argv);
public:
	RosComm(ComponentMain* comp,int argc,char** argv);
	virtual ~RosComm();
	void OdometryCallback(const config::OCU::sub::Odometry::ConstPtr &msg);
	void BladPositionCallback(const config::OCU::sub::BladPosition::ConstPtr &msg);
	void MapCallback(const config::OCU::sub::Map::ConstPtr &msg);
	void WPDDecisionsCallback(const config::OCU::sub::WPDDecisions::ConstPtr &msg);
	void LocalPathCallback(const config::OCU::sub::LocalPath::ConstPtr &msg);
	void IEDDetectionEventCallback(const config::OCU::sub::IEDDetectionEvent::ConstPtr &msg);
	void PlatformStateCallback(const config::OCU::sub::PlatformState::ConstPtr &msg);
	void SoftwareStateCallback(const config::OCU::sub::SoftwareState::ConstPtr &msg);
	void SensorsStateCallback(const config::OCU::sub::SensorsState::ConstPtr &msg);
	void SMMEMissionStateCallback(const config::OCU::sub::SMMEMissionState::ConstPtr &msg);
	void MissionAcceptanceCallback(const config::OCU::sub::MissionAcceptance::ConstPtr &msg);
	void publishPositionUpdate( config::OCU::pub::PositionUpdate &msg);
	void publishSMMECommand( config::OCU::pub::SMMECommand &msg);
	void publishSMMEControlMode( config::OCU::pub::SMMEControlMode &msg);
	void publishNavigationTask( config::OCU::pub::NavigationTask &msg);
	void publishManipulationTask( config::OCU::pub::ManipulationTask &msg);
	void publishMissionTask( config::OCU::pub::MissionTask &msg);
	void publishCustomPath( config::OCU::pub::CustomPath &msg);
	void publishTeleoperationControlMode( config::OCU::pub::TeleoperationControlMode &msg);
	void publishTeleoperationThrottle( config::OCU::pub::TeleoperationThrottle &msg);
	void publishTeleoperationSteering( config::OCU::pub::TeleoperationSteering &msg);
	void publishTeleoperationJoints( config::OCU::pub::TeleoperationJoints &msg);
	void publishIEDDetectionEvent( config::OCU::pub::IEDDetectionEvent &msg);
	void publishIEDLocation( config::OCU::pub::IEDLocation &msg);

  void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
  tf::StampedTransform getLastTrasform(std::string srcFrame, std::string distFrame);
};
#endif /* ROSCOMM_H_ */
