
/*
 * ComponentMain.h
 *
 *  Created on: Thursday, 06. February 2014 04:09PM
 *      Author: autogenerated
 */
#ifndef COMPONENTMAIN_H_
#define COMPONENTMAIN_H_
#include <std_msgs/String.h>
#include <ParameterTypes.h>
#include <tf/tf.h>
class RosComm;
class ComponentMain {
	RosComm* _roscomm;
public:
	ComponentMain(int argc,char** argv);
	virtual ~ComponentMain();
	void handleOdometry(const config::SMME::sub::Odometry& msg);
	void handleBladPosition(const config::SMME::sub::BladPosition& msg);
	void handlePPExecutionState(const config::SMME::sub::PPExecutionState& msg);
	void handleWSMExecutionState(const config::SMME::sub::WSMExecutionState& msg);
	void handleIEDLocation(const config::SMME::sub::IEDLocation& msg);
	void handlePlatformState(const config::SMME::sub::PlatformState& msg);
	void handleSoftwareState(const config::SMME::sub::SoftwareState& msg);
	void handleSensorsState(const config::SMME::sub::SensorsState& msg);
	void handleSMMECommand(const config::SMME::sub::SMMECommand& msg);
	void handleSMMEControlMode(const config::SMME::sub::SMMEControlMode& msg);
	void handleNavigationTask(const config::SMME::sub::NavigationTask& msg);
	void handleManipulationTask(const config::SMME::sub::ManipulationTask& msg);
	void handleMissionTask(const config::SMME::sub::MissionTask& msg);
	void publishWSMData(config::SMME::pub::WSMData& msg);
	void publishMissionAcceptance(config::SMME::pub::MissionAcceptance& msg);
	void publishGlobalPath(config::SMME::pub::GlobalPath& msg);
	void publishMaxSpeed(config::SMME::pub::MaxSpeed& msg);
	void publishSMMEMissionState(config::SMME::pub::SMMEMissionState& msg);
	void publishSMMEComponentState(config::SMME::pub::SMMEComponentState& msg);
	void publishWPDCommand(config::SMME::pub::WPDCommand& msg);
	void publishPPCommand(config::SMME::pub::PPCommand& msg);
	void publishIEDSIMCommand(config::SMME::pub::IEDSIMCommand& msg);
	void publishSSMCommand(config::SMME::pub::SSMCommand& msg);
	void publishWSMCommand(config::SMME::pub::WSMCommand& msg);
	void publishLLCCommand(config::SMME::pub::LLCCommand& msg);
	void publishLOCCommand(config::SMME::pub::LOCCommand& msg);
	void publishPERCommand(config::SMME::pub::PERCommand& msg);
  void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
  tf::StampedTransform getLastTrasform(std::string srcFrame, std::string distFrame);
};
#endif /* COMPONENTMAIN_H_ */
