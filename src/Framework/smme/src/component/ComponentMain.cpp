
/*
 * ComponentMain.cpp
 *
 *  Created on: Thursday, 06. February 2014 04:09PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include "../roscomm/RosComm.h"
ComponentMain::ComponentMain(int argc,char** argv)
{
	_roscomm = new RosComm(this,argc, argv);
}
ComponentMain::~ComponentMain() {
	if(_roscomm) delete _roscomm; _roscomm=0;
}

void ComponentMain::handleOdometry(const config::SMME::sub::Odometry& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handleBladPosition(const config::SMME::sub::BladPosition& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handlePPExecutionState(const config::SMME::sub::PPExecutionState& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handleWSMExecutionState(const config::SMME::sub::WSMExecutionState& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handleIEDLocation(const config::SMME::sub::IEDLocation& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handlePlatformState(const config::SMME::sub::PlatformState& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handleSoftwareState(const config::SMME::sub::SoftwareState& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handleSensorsState(const config::SMME::sub::SensorsState& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handleSMMECommand(const config::SMME::sub::SMMECommand& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handleSMMEControlMode(const config::SMME::sub::SMMEControlMode& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handleNavigationTask(const config::SMME::sub::NavigationTask& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handleManipulationTask(const config::SMME::sub::ManipulationTask& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::handleMissionTask(const config::SMME::sub::MissionTask& msg)
{
	std::cout<< "SMME say:" << msg << std::endl;
}
	

void ComponentMain::publishWSMData(config::SMME::pub::WSMData& msg)
{
	_roscomm->publishWSMData(msg);
}
	

void ComponentMain::publishMissionAcceptance(config::SMME::pub::MissionAcceptance& msg)
{
	_roscomm->publishMissionAcceptance(msg);
}
	

void ComponentMain::publishGlobalPath(config::SMME::pub::GlobalPath& msg)
{
	_roscomm->publishGlobalPath(msg);
}
	

void ComponentMain::publishMaxSpeed(config::SMME::pub::MaxSpeed& msg)
{
	_roscomm->publishMaxSpeed(msg);
}
	

void ComponentMain::publishSMMEMissionState(config::SMME::pub::SMMEMissionState& msg)
{
	_roscomm->publishSMMEMissionState(msg);
}
	

void ComponentMain::publishSMMEComponentState(config::SMME::pub::SMMEComponentState& msg)
{
	_roscomm->publishSMMEComponentState(msg);
}
	

void ComponentMain::publishWPDCommand(config::SMME::pub::WPDCommand& msg)
{
	_roscomm->publishWPDCommand(msg);
}
	

void ComponentMain::publishPPCommand(config::SMME::pub::PPCommand& msg)
{
	_roscomm->publishPPCommand(msg);
}
	

void ComponentMain::publishIEDSIMCommand(config::SMME::pub::IEDSIMCommand& msg)
{
	_roscomm->publishIEDSIMCommand(msg);
}
	

void ComponentMain::publishSSMCommand(config::SMME::pub::SSMCommand& msg)
{
	_roscomm->publishSSMCommand(msg);
}
	

void ComponentMain::publishWSMCommand(config::SMME::pub::WSMCommand& msg)
{
	_roscomm->publishWSMCommand(msg);
}
	

void ComponentMain::publishLLCCommand(config::SMME::pub::LLCCommand& msg)
{
	_roscomm->publishLLCCommand(msg);
}
	

void ComponentMain::publishLOCCommand(config::SMME::pub::LOCCommand& msg)
{
	_roscomm->publishLOCCommand(msg);
}
	

void ComponentMain::publishPERCommand(config::SMME::pub::PERCommand& msg)
{
	_roscomm->publishPERCommand(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	_roscomm->publishTransform(_tf, srcFrame, distFrame);
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame){
	return _roscomm->getLastTrasform(srcFrame, distFrame);;
}
