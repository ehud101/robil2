
/*
 * RosComm.h
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#ifndef ROSCOMM_H_
#define ROSCOMM_H_
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <ParameterTypes.h>
#include <tf/tf.h>
class ComponentMain;
class RosComm {
  bool _inited;
  ComponentMain   * _comp;
  ros::NodeHandle _nh;
	ros::Subscriber _sub_Odometry;
	ros::Subscriber _sub_BladPosition;
	ros::Subscriber _sub_PPExecutionState;
	ros::Subscriber _sub_WSMExecutionState;
	ros::Subscriber _sub_IEDDetectionEvent;
	ros::Subscriber _sub_IEDLocation;
	ros::Subscriber _sub_PlatformState;
	ros::Subscriber _sub_SoftwareState;
	ros::Subscriber _sub_SensorsState;
	ros::Subscriber _sub_SMMECommand;
	ros::Subscriber _sub_SMMEControlMode;
	ros::Subscriber _sub_NavigationTask;
	ros::Subscriber _sub_ManipulationTask;
	ros::Subscriber _sub_MissionTask;
	ros::Publisher  _pub_WSMData;
	ros::Publisher  _pub_MissionAcceptance;
	ros::Publisher  _pub_GlobalPath;
	ros::Publisher  _pub_MaxSpeed;
	ros::Publisher  _pub_SMMEMissionState;
	ros::Publisher  _pub_SMMEComponentState;
	ros::Publisher  _pub_WPDCommand;
	ros::Publisher  _pub_PPCommand;
	ros::Publisher  _pub_IEDSIMCommand;
	ros::Publisher  _pub_SSMCommand;
	ros::Publisher  _pub_WSMCommand;
	ros::Publisher  _pub_LLCCommand;
	ros::Publisher  _pub_LOCCommand;
	ros::Publisher  _pub_PERCommand;

  bool init(int argc,char** argv);
public:
	RosComm(ComponentMain* comp,int argc,char** argv);
	virtual ~RosComm();
	void OdometryCallback(const config::SMME::sub::Odometry::ConstPtr &msg);
	void BladPositionCallback(const config::SMME::sub::BladPosition::ConstPtr &msg);
	void PPExecutionStateCallback(const config::SMME::sub::PPExecutionState::ConstPtr &msg);
	void WSMExecutionStateCallback(const config::SMME::sub::WSMExecutionState::ConstPtr &msg);
	void IEDDetectionEventCallback(const config::SMME::sub::IEDDetectionEvent::ConstPtr &msg);
	void IEDLocationCallback(const config::SMME::sub::IEDLocation::ConstPtr &msg);
	void PlatformStateCallback(const config::SMME::sub::PlatformState::ConstPtr &msg);
	void SoftwareStateCallback(const config::SMME::sub::SoftwareState::ConstPtr &msg);
	void SensorsStateCallback(const config::SMME::sub::SensorsState::ConstPtr &msg);
	void SMMECommandCallback(const config::SMME::sub::SMMECommand::ConstPtr &msg);
	void SMMEControlModeCallback(const config::SMME::sub::SMMEControlMode::ConstPtr &msg);
	void NavigationTaskCallback(const config::SMME::sub::NavigationTask::ConstPtr &msg);
	void ManipulationTaskCallback(const config::SMME::sub::ManipulationTask::ConstPtr &msg);
	void MissionTaskCallback(const config::SMME::sub::MissionTask::ConstPtr &msg);
	void publishWSMData( config::SMME::pub::WSMData &msg);
	void publishMissionAcceptance( config::SMME::pub::MissionAcceptance &msg);
	void publishGlobalPath( config::SMME::pub::GlobalPath &msg);
	void publishMaxSpeed( config::SMME::pub::MaxSpeed &msg);
	void publishSMMEMissionState( config::SMME::pub::SMMEMissionState &msg);
	void publishSMMEComponentState( config::SMME::pub::SMMEComponentState &msg);
	void publishWPDCommand( config::SMME::pub::WPDCommand &msg);
	void publishPPCommand( config::SMME::pub::PPCommand &msg);
	void publishIEDSIMCommand( config::SMME::pub::IEDSIMCommand &msg);
	void publishSSMCommand( config::SMME::pub::SSMCommand &msg);
	void publishWSMCommand( config::SMME::pub::WSMCommand &msg);
	void publishLLCCommand( config::SMME::pub::LLCCommand &msg);
	void publishLOCCommand( config::SMME::pub::LOCCommand &msg);
	void publishPERCommand( config::SMME::pub::PERCommand &msg);

  void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
  tf::StampedTransform getLastTrasform(std::string srcFrame, std::string distFrame);
};
#endif /* ROSCOMM_H_ */
