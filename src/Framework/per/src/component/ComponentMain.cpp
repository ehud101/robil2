
/*
 * ComponentMain.cpp
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include "../roscomm/RosComm.h"
ComponentMain::ComponentMain(int argc,char** argv)
{
	_roscomm = new RosComm(this,argc, argv);
}
ComponentMain::~ComponentMain() {
	if(_roscomm) delete _roscomm; _roscomm=0;
}

void ComponentMain::handleSensor_SICK_1(const config::PER::sub::Sensor_SICK_1& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSensor_SICK_2(const config::PER::sub::Sensor_SICK_2& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSensor_IBEO_1(const config::PER::sub::Sensor_IBEO_1& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSensor_IBEO_2(const config::PER::sub::Sensor_IBEO_2& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSensor_IBEO_3(const config::PER::sub::Sensor_IBEO_3& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSensor_IBEO_4(const config::PER::sub::Sensor_IBEO_4& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSensor_CAM_R(const config::PER::sub::Sensor_CAM_R& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSensor_CAM_L(const config::PER::sub::Sensor_CAM_L& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSensor_WIRE(const config::PER::sub::Sensor_WIRE& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSensor_INS(const config::PER::sub::Sensor_INS& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSensor_GPS(const config::PER::sub::Sensor_GPS& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleOdometry(const config::PER::sub::Odometry& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleTrottleEffort(const config::PER::sub::TrottleEffort& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleSteeringEffort(const config::PER::sub::SteeringEffort& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleJointsEffort(const config::PER::sub::JointsEffort& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handlePERCommand(const config::PER::sub::PERCommand& msg)
{
	std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::publishMiniMap(config::PER::pub::MiniMap& msg)
{
	_roscomm->publishMiniMap(msg);
}
	

void ComponentMain::publishMap(config::PER::pub::Map& msg)
{
	_roscomm->publishMap(msg);
}
	

void ComponentMain::publishINS(config::PER::pub::INS& msg)
{
	_roscomm->publishINS(msg);
}
	

void ComponentMain::publishGPS(config::PER::pub::GPS& msg)
{
	_roscomm->publishGPS(msg);
}
	

void ComponentMain::publishBladPosition(config::PER::pub::BladPosition& msg)
{
	_roscomm->publishBladPosition(msg);
}
	

void ComponentMain::publishVOOdometry(config::PER::pub::VOOdometry& msg)
{
	_roscomm->publishVOOdometry(msg);
}
	

void ComponentMain::publishSensorsCommand(config::PER::pub::SensorsCommand& msg)
{
	_roscomm->publishSensorsCommand(msg);
}
	

void ComponentMain::publishPERSensorsState(config::PER::pub::PERSensorsState& msg)
{
	_roscomm->publishPERSensorsState(msg);
}
	

void ComponentMain::publishPERComponentState(config::PER::pub::PERComponentState& msg)
{
	_roscomm->publishPERComponentState(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	_roscomm->publishTransform(_tf, srcFrame, distFrame);
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame){
	return _roscomm->getLastTrasform(srcFrame, distFrame);;
}
