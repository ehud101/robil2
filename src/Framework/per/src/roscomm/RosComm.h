
/*
 * RosComm.h
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#ifndef ROSCOMM_H_
#define ROSCOMM_H_
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <ParameterTypes.h>
#include <tf/tf.h>
class ComponentMain;
class RosComm {
  bool _inited;
  ComponentMain   * _comp;
  ros::NodeHandle _nh;
	ros::Subscriber _sub_Sensor_SICK_1;
	ros::Subscriber _sub_Sensor_SICK_2;
	ros::Subscriber _sub_Sensor_IBEO_1;
	ros::Subscriber _sub_Sensor_IBEO_2;
	ros::Subscriber _sub_Sensor_IBEO_3;
	ros::Subscriber _sub_Sensor_IBEO_4;
	ros::Subscriber _sub_Sensor_CAM_R;
	ros::Subscriber _sub_Sensor_CAM_L;
	ros::Subscriber _sub_Sensor_WIRE;
	ros::Subscriber _sub_Sensor_INS;
	ros::Subscriber _sub_Sensor_GPS;
	ros::Subscriber _sub_Odometry;
	ros::Subscriber _sub_TrottleEffort;
	ros::Subscriber _sub_SteeringEffort;
	ros::Subscriber _sub_JointsEffort;
	ros::Subscriber _sub_PERCommand;
	ros::Publisher  _pub_MiniMap;
	ros::Publisher  _pub_Map;
	ros::Publisher  _pub_INS;
	ros::Publisher  _pub_GPS;
	ros::Publisher  _pub_BladPosition;
	ros::Publisher  _pub_VOOdometry;
	ros::Publisher  _pub_SensorsCommand;
	ros::Publisher  _pub_PERSensorsState;
	ros::Publisher  _pub_PERComponentState;

  bool init(int argc,char** argv);
public:
	RosComm(ComponentMain* comp,int argc,char** argv);
	virtual ~RosComm();
	void Sensor_SICK_1Callback(const config::PER::sub::Sensor_SICK_1::ConstPtr &msg);
	void Sensor_SICK_2Callback(const config::PER::sub::Sensor_SICK_2::ConstPtr &msg);
	void Sensor_IBEO_1Callback(const config::PER::sub::Sensor_IBEO_1::ConstPtr &msg);
	void Sensor_IBEO_2Callback(const config::PER::sub::Sensor_IBEO_2::ConstPtr &msg);
	void Sensor_IBEO_3Callback(const config::PER::sub::Sensor_IBEO_3::ConstPtr &msg);
	void Sensor_IBEO_4Callback(const config::PER::sub::Sensor_IBEO_4::ConstPtr &msg);
	void Sensor_CAM_RCallback(const config::PER::sub::Sensor_CAM_R::ConstPtr &msg);
	void Sensor_CAM_LCallback(const config::PER::sub::Sensor_CAM_L::ConstPtr &msg);
	void Sensor_WIRECallback(const config::PER::sub::Sensor_WIRE::ConstPtr &msg);
	void Sensor_INSCallback(const config::PER::sub::Sensor_INS::ConstPtr &msg);
	void Sensor_GPSCallback(const config::PER::sub::Sensor_GPS::ConstPtr &msg);
	void OdometryCallback(const config::PER::sub::Odometry::ConstPtr &msg);
	void TrottleEffortCallback(const config::PER::sub::TrottleEffort::ConstPtr &msg);
	void SteeringEffortCallback(const config::PER::sub::SteeringEffort::ConstPtr &msg);
	void JointsEffortCallback(const config::PER::sub::JointsEffort::ConstPtr &msg);
	void PERCommandCallback(const config::PER::sub::PERCommand::ConstPtr &msg);
	void publishMiniMap( config::PER::pub::MiniMap &msg);
	void publishMap( config::PER::pub::Map &msg);
	void publishINS( config::PER::pub::INS &msg);
	void publishGPS( config::PER::pub::GPS &msg);
	void publishBladPosition( config::PER::pub::BladPosition &msg);
	void publishVOOdometry( config::PER::pub::VOOdometry &msg);
	void publishSensorsCommand( config::PER::pub::SensorsCommand &msg);
	void publishPERSensorsState( config::PER::pub::PERSensorsState &msg);
	void publishPERComponentState( config::PER::pub::PERComponentState &msg);

  void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
  tf::StampedTransform getLastTrasform(std::string srcFrame, std::string distFrame);
};
#endif /* ROSCOMM_H_ */
