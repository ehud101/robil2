
/*
 * RosComm.cpp
 *
 *  Created on: Thursday, 06. February 2014 04:09PM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{
	_sub_VOOdometry=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LOC","VOOdometry","sub"), 10, &RosComm::VOOdometryCallback,this));
	_sub_GPS=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LOC","GPS","sub"), 10, &RosComm::GPSCallback,this));
	_sub_INS=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LOC","INS","sub"), 10, &RosComm::INSCallback,this));
	_sub_PositionUpdate=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LOC","PositionUpdate","sub"), 10, &RosComm::PositionUpdateCallback,this));
	_sub_LOCCommand=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LOC","LOCCommand","sub"), 10, &RosComm::LOCCommandCallback,this));
	_pub_Odometry=ros::Publisher(_nh.advertise<config::LOC::pub::Odometry>(fetchParam(&_nh,"LOC","Odometry","pub"),10));
	_pub_LOCState=ros::Publisher(_nh.advertise<config::LOC::pub::LOCState>(fetchParam(&_nh,"LOC","LOCState","pub"),10));
	_pub_LOCComponentState=ros::Publisher(_nh.advertise<config::LOC::pub::LOCComponentState>(fetchParam(&_nh,"LOC","LOCComponentState","pub"),10));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"LOC_node");
	return true;
}


void RosComm::VOOdometryCallback(const config::LOC::sub::VOOdometry::ConstPtr &msg)
{
	_comp->handleVOOdometry(*msg);
}
	

void RosComm::GPSCallback(const config::LOC::sub::GPS::ConstPtr &msg)
{
	_comp->handleGPS(*msg);
}
	

void RosComm::INSCallback(const config::LOC::sub::INS::ConstPtr &msg)
{
	_comp->handleINS(*msg);
}
	

void RosComm::PositionUpdateCallback(const config::LOC::sub::PositionUpdate::ConstPtr &msg)
{
	_comp->handlePositionUpdate(*msg);
}
	

void RosComm::LOCCommandCallback(const config::LOC::sub::LOCCommand::ConstPtr &msg)
{
	_comp->handleLOCCommand(*msg);
}
	

void RosComm::publishOdometry( config::LOC::pub::Odometry &msg)
{
	_pub_Odometry.publish(msg);
}
	

void RosComm::publishLOCState( config::LOC::pub::LOCState &msg)
{
	_pub_LOCState.publish(msg);
}
	

void RosComm::publishLOCComponentState( config::LOC::pub::LOCComponentState &msg)
{
	_pub_LOCComponentState.publish(msg);
}
	
void RosComm::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform RosComm::getLastTrasform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
	static tf::TransformListener listener;
	try {
	    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
	    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
	} catch (tf::TransformException& ex) {
	    ROS_ERROR("%s",ex.what());
	}
	return _tf;
}
