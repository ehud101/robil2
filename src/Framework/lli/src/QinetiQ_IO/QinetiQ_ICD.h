#pragma once

#ifndef _QINETIQ_ICD_H_
#define _QINETIQ_ICD_H_

//
// Outgoing messages
//

#ifndef BYTE
#define BYTE	unsigned char
#endif

#define JAUS_BIG_ENDIAN

/*
const int    qin_headerSize = 16;

const BYTE qin_lli_MsgProp[] = { 0x06, 0x02 };

#ifdef JAUS_BIG_ENDIAN
const unsigned short qin_HeartBeatID = 0x0222;
const unsigned short qin_CtrlConfirmId = 0x0F00;
const unsigned short qin_CtrlReject = 0x1000;

const unsigned short qin_DriveCtrlCode = 0x0166;
const unsigned short qin_ManipulatorCtrlCode = 0x0169;

const unsigned short lli_HeartBeatConfirmId = 0x0242;
const unsigned short lli_DriveCtrlCmdId = 0x0D00;
const unsigned short lli_DriveCtrlStopId = 0x0E00;
const unsigned short lli_SetWrenchEffortId = 0x0504;
const unsigned short lli_SetJointEffortId = 0x0106;

#elif JAUS_LITLE_ENDIAN
const unsigned short qin_HeartBeatID = 0x2202;
const unsigned short qin_CtrlConfirmId = 0x000F;
const unsigned short qin_CtrlReject = 0x0010;

const unsigned short lli_HeartBeatConfirmId = 0x4202;
const unsigned short lli_DriveCtrlCmdId = 0x000D;
const unsigned short lli_DriveCtrlStopId = 0x000E;
const unsigned short lli_SetWrenchEffortId = 0x0405;
const unsigned short lli_SetJointEffortId = 0x0601;
#endif

// Bytes 2-3 (zero based) - message ID
// Bytes 14-15 - the short message counter (sequence mesage)

#ifdef JAUS_BIG_ENDIAN
// Query Heartbeat Pulse - 20 Hz 
BYTE QIN_QueryHeartbeatMsg[] =            { 0x06, 0x02, 0x02, 0x22, 0x01, 0xAE, 0x01, 0x05, 0x01, 0x51, 0x01, 0xC8, 0x00, 0x00, 0xAA, 0xAA };

// Confirm Component Control:
//
// Drive Control Responce 
BYTE QIN_DriveControlConfirmMsg[] =       { 0x06, 0x02, 0x0F, 0x00, 0x01, 0xAE, 0x01, 0x05, 0x01, 0x66, 0x01, 0xC9, 0x01, 0x00, 0xAA, 0xAA, 0x00 };
BYTE QIN_ManipulatorControlConfirmMsg[] = { 0x06, 0x02, 0x0F, 0x00, 0x01, 0xAE, 0x01, 0x05, 0x01, 0x69, 0x01, 0xC9, 0x01, 0x00, 0xAA, 0xAA, 0x00 };

// Reject Control Responce 
BYTE QIN_DriveControlRejectMsg[] =       { 0x06, 0x02, 0x10, 0x00, 0x01, 0xAE, 0x01, 0x05, 0x01, 0x66, 0x01, 0xC9, 0x00, 0x00, 0xAA, 0xAA };
BYTE QIN_ManipulatorControlRejectMsg[] = { 0x06, 0x02, 0x10, 0x00, 0x01, 0xAE, 0x01, 0x05, 0x01, 0x69, 0x01, 0xC9, 0x00, 0x00, 0xAA, 0xAA };

//
// Incoming Messages (from LLI component)
//

// Report Heartbeat Pulse - reply for the Heartbeat Pulse Message (all states)
BYTE LLI_ReportQueryHeartbeatMsg[] =   { 0x06, 0x02, 0x02, 0x42, 0x01, 0x51, 0x01, 0xC8, 0x01, 0xAE, 0x01, 0x05, 0x00, 0x00, 0xAA, 0xAA }; 

// Request Component Control
//
// To Drive Control (the last Byte - LLI Authority Code)
BYTE LLI_DriveControlMsg[] =           { 0x06, 0x02, 0x0D, 0x00, 0x01, 0x66, 0x01, 0xC9, 0x01, 0xAE, 0x01, 0x05, 0x01, 0x00, 0xAA, 0xAA, 0x00 };
// To Manipulator Control (the last Byte - LLI Authority Code)
BYTE LLI_ManipulatorControlMsg[] =     { 0x06, 0x02, 0x0D, 0x00, 0x01, 0x69, 0x01, 0xC9, 0x01, 0xAE, 0x01, 0x05, 0x01, 0x00, 0xAA, 0xAA, 0x00 };

// Release Component Control
// To Drive Contorl
BYTE LLI_DriveControlStopMsg[] =       { 0x06, 0x02, 0x0E, 0x00, 0x01, 0x66, 0x01, 0xC9, 0x01, 0xAE, 0x01, 0x05, 0x00, 0x00, 0xAA, 0xAA };
// To Manipulator Contorl
BYTE LLI_ManipulatorControlStopMsg[] = { 0x06, 0x02, 0x0E, 0x00, 0x01, 0x69, 0x01, 0xC9, 0x01, 0xAE, 0x01, 0x05, 0x00, 0x00, 0xAA, 0xAA };

// Set Wrench Effort (last two bytes - LLS/EFFORT/Throttel and LLS/EFFORT/Steering accordingly)
BYTE LLI_SetWrenchEffortMsg[] = { 0x06, 0x02, 0x05, 0x04, 0x01, 0x66, 0x01, 0xC9, 0x01, 0xAE, 0x01, 0x05, 0x06, 0x00, 0xAA, 0xAA, 0x00, 0x21, 0x00, 0x00 };
BYTE LLI_SetJointEffortMsg[] =  { 0x06, 0x02, 0x01, 0x06, 0x01, 0x69, 0x01, 0xC9, 0x01, 0xAE, 0x01, 0x05, 0x05, 0x00, 0xAA, 0xAA, 0x02, 0x00, 0x00 };

*/

// 
// Jaus Message Header (standard)
// Sise of header - 16 bytes
// Re. Litlev\endian Byte Ordering
//

#pragma pack (1)
struct JausMessageHeader {
	unsigned short	msgProperties;
	unsigned short	cmdCode;
	BYTE			dstInstanteID;
	BYTE			dstComponentID;
	BYTE			dstNodeID;
	BYTE			dstSubsystemID;
	BYTE			srcInstanteID;
	BYTE			srcComponentID;
	BYTE			srcNodeID;
	BYTE			srcSubsystemID;
	unsigned short	dataControl;		// data size
	unsigned short	seqNumber;
};



//#elif JAUS_LITLE_ENDIAN
// T B D
//#endif

#pragma pack ()

#endif // QINETIQ_ICD_H_

