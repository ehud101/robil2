
/*
 * RosComm.h
 *
 *  Created on: Thursday, 06. February 2014 04:09PM
 *      Author: autogenerated
 */
#ifndef ROSCOMM_H_
#define ROSCOMM_H_
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <ParameterTypes.h>
#include <tf/tf.h>
class ComponentMain;
class RosComm {
  bool _inited;
  ComponentMain   * _comp;
  ros::NodeHandle _nh;
	ros::Subscriber _sub_LLCPlatformState;
	ros::Subscriber _sub_Odometry;
	ros::Subscriber _sub_BladPosition;
	ros::Subscriber _sub_PERSensorsState;
	ros::Subscriber _sub_WPDDecisions;
	ros::Subscriber _sub_WSMExecutionState;
	ros::Subscriber _sub_SMMEMissionState;
	ros::Subscriber _sub_IEDSIMComponentState;
	ros::Subscriber _sub_SMMEComponentState;
	ros::Subscriber _sub_SSMComponentState;
	ros::Subscriber _sub_LLCComponentState;
	ros::Subscriber _sub_LOCComponentState;
	ros::Subscriber _sub_PERComponentState;
	ros::Subscriber _sub_PPComponentState;
	ros::Subscriber _sub_WPDComponentState;
	ros::Subscriber _sub_SSMCommand;
	ros::Publisher  _pub_PlatformState;
	ros::Publisher  _pub_SoftwareState;
	ros::Publisher  _pub_SensorsState;
	ros::Publisher  _pub_SSMComponentState;

  bool init(int argc,char** argv);
public:
	RosComm(ComponentMain* comp,int argc,char** argv);
	virtual ~RosComm();
	void LLCPlatformStateCallback(const config::SSM::sub::LLCPlatformState::ConstPtr &msg);
	void OdometryCallback(const config::SSM::sub::Odometry::ConstPtr &msg);
	void BladPositionCallback(const config::SSM::sub::BladPosition::ConstPtr &msg);
	void PERSensorsStateCallback(const config::SSM::sub::PERSensorsState::ConstPtr &msg);
	void WPDDecisionsCallback(const config::SSM::sub::WPDDecisions::ConstPtr &msg);
	void WSMExecutionStateCallback(const config::SSM::sub::WSMExecutionState::ConstPtr &msg);
	void SMMEMissionStateCallback(const config::SSM::sub::SMMEMissionState::ConstPtr &msg);
	void IEDSIMComponentStateCallback(const config::SSM::sub::IEDSIMComponentState::ConstPtr &msg);
	void SMMEComponentStateCallback(const config::SSM::sub::SMMEComponentState::ConstPtr &msg);
	void SSMComponentStateCallback(const config::SSM::sub::SSMComponentState::ConstPtr &msg);
	void LLCComponentStateCallback(const config::SSM::sub::LLCComponentState::ConstPtr &msg);
	void LOCComponentStateCallback(const config::SSM::sub::LOCComponentState::ConstPtr &msg);
	void PERComponentStateCallback(const config::SSM::sub::PERComponentState::ConstPtr &msg);
	void PPComponentStateCallback(const config::SSM::sub::PPComponentState::ConstPtr &msg);
	void WPDComponentStateCallback(const config::SSM::sub::WPDComponentState::ConstPtr &msg);
	void SSMCommandCallback(const config::SSM::sub::SSMCommand::ConstPtr &msg);
	void publishPlatformState( config::SSM::pub::PlatformState &msg);
	void publishSoftwareState( config::SSM::pub::SoftwareState &msg);
	void publishSensorsState( config::SSM::pub::SensorsState &msg);
	void publishSSMComponentState( config::SSM::pub::SSMComponentState &msg);

  void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
  tf::StampedTransform getLastTrasform(std::string srcFrame, std::string distFrame);
};
#endif /* ROSCOMM_H_ */
