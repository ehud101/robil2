
/*
 * RosComm.cpp
 *
 *  Created on: Thursday, 06. February 2014 04:09PM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{
	_sub_LLCPlatformState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","LLCPlatformState","sub"), 10, &RosComm::LLCPlatformStateCallback,this));
	_sub_Odometry=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","Odometry","sub"), 10, &RosComm::OdometryCallback,this));
	_sub_BladPosition=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","BladPosition","sub"), 10, &RosComm::BladPositionCallback,this));
	_sub_PERSensorsState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","PERSensorsState","sub"), 10, &RosComm::PERSensorsStateCallback,this));
	_sub_WPDDecisions=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","WPDDecisions","sub"), 10, &RosComm::WPDDecisionsCallback,this));
	_sub_WSMExecutionState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","WSMExecutionState","sub"), 10, &RosComm::WSMExecutionStateCallback,this));
	_sub_SMMEMissionState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","SMMEMissionState","sub"), 10, &RosComm::SMMEMissionStateCallback,this));
	_sub_IEDSIMComponentState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","IEDSIMComponentState","sub"), 10, &RosComm::IEDSIMComponentStateCallback,this));
	_sub_SMMEComponentState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","SMMEComponentState","sub"), 10, &RosComm::SMMEComponentStateCallback,this));
	_sub_SSMComponentState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","SSMComponentState","sub"), 10, &RosComm::SSMComponentStateCallback,this));
	_sub_LLCComponentState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","LLCComponentState","sub"), 10, &RosComm::LLCComponentStateCallback,this));
	_sub_LOCComponentState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","LOCComponentState","sub"), 10, &RosComm::LOCComponentStateCallback,this));
	_sub_PERComponentState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","PERComponentState","sub"), 10, &RosComm::PERComponentStateCallback,this));
	_sub_PPComponentState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","PPComponentState","sub"), 10, &RosComm::PPComponentStateCallback,this));
	_sub_WPDComponentState=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","WPDComponentState","sub"), 10, &RosComm::WPDComponentStateCallback,this));
	_sub_SSMCommand=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SSM","SSMCommand","sub"), 10, &RosComm::SSMCommandCallback,this));
	_pub_PlatformState=ros::Publisher(_nh.advertise<config::SSM::pub::PlatformState>(fetchParam(&_nh,"SSM","PlatformState","pub"),10));
	_pub_SoftwareState=ros::Publisher(_nh.advertise<config::SSM::pub::SoftwareState>(fetchParam(&_nh,"SSM","SoftwareState","pub"),10));
	_pub_SensorsState=ros::Publisher(_nh.advertise<config::SSM::pub::SensorsState>(fetchParam(&_nh,"SSM","SensorsState","pub"),10));
	_pub_SSMComponentState=ros::Publisher(_nh.advertise<config::SSM::pub::SSMComponentState>(fetchParam(&_nh,"SSM","SSMComponentState","pub"),10));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"SSM_node");
	return true;
}


void RosComm::LLCPlatformStateCallback(const config::SSM::sub::LLCPlatformState::ConstPtr &msg)
{
	_comp->handleLLCPlatformState(*msg);
}
	

void RosComm::OdometryCallback(const config::SSM::sub::Odometry::ConstPtr &msg)
{
	_comp->handleOdometry(*msg);
}
	

void RosComm::BladPositionCallback(const config::SSM::sub::BladPosition::ConstPtr &msg)
{
	_comp->handleBladPosition(*msg);
}
	

void RosComm::PERSensorsStateCallback(const config::SSM::sub::PERSensorsState::ConstPtr &msg)
{
	_comp->handlePERSensorsState(*msg);
}
	

void RosComm::WPDDecisionsCallback(const config::SSM::sub::WPDDecisions::ConstPtr &msg)
{
	_comp->handleWPDDecisions(*msg);
}
	

void RosComm::WSMExecutionStateCallback(const config::SSM::sub::WSMExecutionState::ConstPtr &msg)
{
	_comp->handleWSMExecutionState(*msg);
}
	

void RosComm::SMMEMissionStateCallback(const config::SSM::sub::SMMEMissionState::ConstPtr &msg)
{
	_comp->handleSMMEMissionState(*msg);
}
	

void RosComm::IEDSIMComponentStateCallback(const config::SSM::sub::IEDSIMComponentState::ConstPtr &msg)
{
	_comp->handleIEDSIMComponentState(*msg);
}
	

void RosComm::SMMEComponentStateCallback(const config::SSM::sub::SMMEComponentState::ConstPtr &msg)
{
	_comp->handleSMMEComponentState(*msg);
}
	

void RosComm::SSMComponentStateCallback(const config::SSM::sub::SSMComponentState::ConstPtr &msg)
{
	_comp->handleSSMComponentState(*msg);
}
	

void RosComm::LLCComponentStateCallback(const config::SSM::sub::LLCComponentState::ConstPtr &msg)
{
	_comp->handleLLCComponentState(*msg);
}
	

void RosComm::LOCComponentStateCallback(const config::SSM::sub::LOCComponentState::ConstPtr &msg)
{
	_comp->handleLOCComponentState(*msg);
}
	

void RosComm::PERComponentStateCallback(const config::SSM::sub::PERComponentState::ConstPtr &msg)
{
	_comp->handlePERComponentState(*msg);
}
	

void RosComm::PPComponentStateCallback(const config::SSM::sub::PPComponentState::ConstPtr &msg)
{
	_comp->handlePPComponentState(*msg);
}
	

void RosComm::WPDComponentStateCallback(const config::SSM::sub::WPDComponentState::ConstPtr &msg)
{
	_comp->handleWPDComponentState(*msg);
}
	

void RosComm::SSMCommandCallback(const config::SSM::sub::SSMCommand::ConstPtr &msg)
{
	_comp->handleSSMCommand(*msg);
}
	

void RosComm::publishPlatformState( config::SSM::pub::PlatformState &msg)
{
	_pub_PlatformState.publish(msg);
}
	

void RosComm::publishSoftwareState( config::SSM::pub::SoftwareState &msg)
{
	_pub_SoftwareState.publish(msg);
}
	

void RosComm::publishSensorsState( config::SSM::pub::SensorsState &msg)
{
	_pub_SensorsState.publish(msg);
}
	

void RosComm::publishSSMComponentState( config::SSM::pub::SSMComponentState &msg)
{
	_pub_SSMComponentState.publish(msg);
}
	
void RosComm::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform RosComm::getLastTrasform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
	static tf::TransformListener listener;
	try {
	    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
	    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
	} catch (tf::TransformException& ex) {
	    ROS_ERROR("%s",ex.what());
	}
	return _tf;
}
