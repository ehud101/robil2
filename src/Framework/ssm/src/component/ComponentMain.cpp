
/*
 * ComponentMain.cpp
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include "../roscomm/RosComm.h"
ComponentMain::ComponentMain(int argc,char** argv)
{
	_roscomm = new RosComm(this,argc, argv);
}
ComponentMain::~ComponentMain() {
	if(_roscomm) delete _roscomm; _roscomm=0;
}

void ComponentMain::handleLLCPlatformState(const config::SSM::sub::LLCPlatformState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleOdometry(const config::SSM::sub::Odometry& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleBladPosition(const config::SSM::sub::BladPosition& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handlePERSensorsState(const config::SSM::sub::PERSensorsState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleWPDDecisions(const config::SSM::sub::WPDDecisions& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleWSMExecutionState(const config::SSM::sub::WSMExecutionState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleSMMEMissionState(const config::SSM::sub::SMMEMissionState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleIEDSIMComponentState(const config::SSM::sub::IEDSIMComponentState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleSMMEComponentState(const config::SSM::sub::SMMEComponentState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleSSMComponentState(const config::SSM::sub::SSMComponentState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleLLCComponentState(const config::SSM::sub::LLCComponentState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleLOCComponentState(const config::SSM::sub::LOCComponentState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handlePERComponentState(const config::SSM::sub::PERComponentState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handlePPComponentState(const config::SSM::sub::PPComponentState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleWPDComponentState(const config::SSM::sub::WPDComponentState& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::handleSSMCommand(const config::SSM::sub::SSMCommand& msg)
{
	std::cout<< "SSM say:" << msg << std::endl;
}
	

void ComponentMain::publishPlatformState(config::SSM::pub::PlatformState& msg)
{
	_roscomm->publishPlatformState(msg);
}
	

void ComponentMain::publishSoftwareState(config::SSM::pub::SoftwareState& msg)
{
	_roscomm->publishSoftwareState(msg);
}
	

void ComponentMain::publishSensorsState(config::SSM::pub::SensorsState& msg)
{
	_roscomm->publishSensorsState(msg);
}
	

void ComponentMain::publishSSMComponentState(config::SSM::pub::SSMComponentState& msg)
{
	_roscomm->publishSSMComponentState(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	_roscomm->publishTransform(_tf, srcFrame, distFrame);
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame){
	return _roscomm->getLastTrasform(srcFrame, distFrame);;
}
