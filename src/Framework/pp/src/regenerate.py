#!/usr/bin/python

from datetime import datetime, date, time

def gen_roscomm_header( subscribers, publishers, func_subscribers, func_publisher ):
	code = \
"""
 * RosComm.h
 *
 *  Created on: """+datetime.now().strftime("%A, %d. %B %Y %I:%M%p")+"""
 *      Author: autogenerated
 */
#ifndef ROSCOMM_H_
#define ROSCOMM_H_
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <ParameterTypes.h>
class ComponentMain;
class RosComm {
  ComponentMain   * _comp;
  ros::NodeHandle _nh;
""" + subscribers +"\n"+ publishers +"\n"+\
"""
public:
	RosComm(ComponentMain* comp,int argc,char** argv);
	virtual ~RosComm();
""" + func_subscribers +"\n"+ func_publisher +"\n"+ \
"""
};
#endif /* ROSCOMM_H_ */
"""
	return code
	
	
def get_component_header(func_subscribers, func_publisher):
	code = \
"""
/*
 * ComponentMain.h
 *
 *  Created on: """+datetime.now().strftime("%A, %d. %B %Y %I:%M%p")+"""
 *      Author: autogenerated
 */
#ifndef COMPONENTMAIN_H_
#define COMPONENTMAIN_H_
#include <std_msgs/String.h>
#include <ParameterTypes.h>
class RosComm;
class ComponentMain {
	RosComm* _roscomm;
public:
	ComponentMain(int argc,char** argv);
	virtual ~ComponentMain();
""" + func_subscribers +"\n"+ func_publisher  +\
"""
};
#endif /* COMPONENTMAIN_H_ */
"""
	return code

def gen_roscomm_source(subs, pubs, fun_subs, fun_pubs):
	code = \
"""
/*
 * RosComm.cpp
 *
 *  Created on: """+datetime.now().strftime("%A, %d. %B %Y %I:%M%p")+"""
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
{
  ros::init(argc,argv,"PP_node");
  _comp=comp;
""" + subs +"\n"+ pubs +\
"""
}
RosComm::~RosComm()
{
}
""" + fun_subs +"\n"+ fun_pubs +\
"""
"""
	return code


def get_component_source(fun_subs, fun_pubs):
	code = \
"""
/*
 * ComponentMain.cpp
 *
 *  Created on: """+datetime.now().strftime("%A, %d. %B %Y %I:%M%p")+"""
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include "../roscomm/RosComm.h"
ComponentMain::ComponentMain(int argc,char** argv)
{
	_roscomm = new RosComm(this,argc, argv);
}
ComponentMain::~ComponentMain() {
	if(_roscomm) delete _roscomm;
}
""" + fun_subs +"\n"+ fun_pubs +\
"""
"""
	return code

	
def gen_roscomm_header_subscriber( comp, name ):
	return "\tros::Subscriber _sub_"+name+";"

def get_roscomm_header_subscribe_function( comp, name ):
	return "\tvoid "+name+"Callback(const config::"+comp+"::sub::"+name+"::ConstPtr &msg);"


def get_component_header_subscribe_function( comp, name ):
	return "\tvoid handle"+name+"(const config::"+comp+"::sub::"+name+"& msg);"


def gen_roscomm_source_subscriber( comp, name ):
	return "\t_sub_Map=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,\""+comp+"\",\""+name+"\",\"sub\"), 10, &RosComm::"+name+"Callback,this));"

def get_roscomm_source_subscribe_function( comp, name ):
	code=\
	"""
void RosComm::"""+name+"""Callback(const config::"""+comp+"""::sub::"""+name+"""::ConstPtr &msg)
{
	_comp->handle"""+name+"""(*msg);
}
	"""
	return code

def get_component_source_subscribe_fun( comp, name ):
	code=\
	"""
void ComponentMain::handle"""+name+"""(config::"""+comp+"""::sub::"""+name+"""& msg)
{
	std::cout<< \""""+comp+""" say:" << msg.data << std::endl;
}
	"""
	return code

def gen_roscomm_header_publisher( comp, name ):
	return "\tros::Publisher  _pub_"+name+";"

def get_roscomm_header_publish_function( comp, name ):
	return "\tvoid publish"+name+"( config::"+comp+"::pub::"+name+" &msg);"


def get_component_header_publish_function( comp, name ):
	return "\tvoid publish"+name+"(config::"+comp+"::pub::"+name+"& msg);"


def gen_roscomm_source_publisher( comp, name ):
	return "\t_pub_"+name+"=ros::Publisher(_nh.advertise<config::"+comp+"::pub::"+name+">(fetchParam(&_nh,\""+comp+"\",\""+name+"\",\"pub\"),10));"

def get_roscomm_source_publish_function( comp, name ):
	code =\
	"""
void RosComm::publish"""+name+"""( config::"""+comp+"""::pub::"""+name+""" &msg)
{
	_pub_"""+name+""".publish(msg);
}
	"""
	return code

def get_component_source_publish_function( comp, name ):
	code =\
	"""
void ComponentMain::publish"""+name+"""(config::"""+comp+"""::pub::"""+name+"""& msg)
{
	_roscomm->publish"""+name+"""(msg);
}
	"""
	return code

	
print "==================="
print gen_roscomm_header(
	gen_roscomm_header_subscriber("PP","Map"),gen_roscomm_header_publisher("PP","LocalPathPlan"),
	get_roscomm_header_subscribe_function("PP","Map"),get_roscomm_header_publish_function("PP","LocalPathPlan")
	)
print "==================="
print get_component_header(get_component_header_subscribe_function("PP","LocalPathPlan"),get_component_header_publish_function("PP","LocalPathPlan"))


print "==================="
print gen_roscomm_source(
	gen_roscomm_source_subscriber("PP","Map"),gen_roscomm_source_publisher("PP","LocalPathPlan"),
	get_roscomm_source_subscribe_function("PP","Map"),get_roscomm_source_publish_function("PP","LocalPathPlan")
	)
print "==================="
print get_component_source(get_component_source_subscribe_fun("PP","LocalPathPlan"),get_component_source_publish_function("PP","LocalPathPlan"))


