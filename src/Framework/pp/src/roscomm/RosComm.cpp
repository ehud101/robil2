
/*
 * RosComm.cpp
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{
	_sub_Map=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PP","Map","sub"), 10, &RosComm::MapCallback,this));
	_sub_Odometry=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PP","Odometry","sub"), 10, &RosComm::OdometryCallback,this));
	_sub_PPCommand=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PP","PPCommand","sub"), 10, &RosComm::PPCommandCallback,this));
	_sub_GlobalPath=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PP","GlobalPath","sub"), 10, &RosComm::GlobalPathCallback,this));
	_sub_MaxSpeed=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PP","MaxSpeed","sub"), 10, &RosComm::MaxSpeedCallback,this));
	_pub_LocalPath=ros::Publisher(_nh.advertise<config::PP::pub::LocalPath>(fetchParam(&_nh,"PP","LocalPath","pub"),10));
	_pub_PPExecutionState=ros::Publisher(_nh.advertise<config::PP::pub::PPExecutionState>(fetchParam(&_nh,"PP","PPExecutionState","pub"),10));
	_pub_PPComponentState=ros::Publisher(_nh.advertise<config::PP::pub::PPComponentState>(fetchParam(&_nh,"PP","PPComponentState","pub"),10));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"PP_node");
	return true;
}


void RosComm::MapCallback(const config::PP::sub::Map::ConstPtr &msg)
{
	_comp->handleMap(*msg);
}
	

void RosComm::OdometryCallback(const config::PP::sub::Odometry::ConstPtr &msg)
{
	_comp->handleOdometry(*msg);
}
	

void RosComm::PPCommandCallback(const config::PP::sub::PPCommand::ConstPtr &msg)
{
	_comp->handlePPCommand(*msg);
}
	

void RosComm::GlobalPathCallback(const config::PP::sub::GlobalPath::ConstPtr &msg)
{
	_comp->handleGlobalPath(*msg);
}
	

void RosComm::MaxSpeedCallback(const config::PP::sub::MaxSpeed::ConstPtr &msg)
{
	_comp->handleMaxSpeed(*msg);
}
	

void RosComm::publishLocalPath( config::PP::pub::LocalPath &msg)
{
	_pub_LocalPath.publish(msg);
}
	

void RosComm::publishPPExecutionState( config::PP::pub::PPExecutionState &msg)
{
	_pub_PPExecutionState.publish(msg);
}
	

void RosComm::publishPPComponentState( config::PP::pub::PPComponentState &msg)
{
	_pub_PPComponentState.publish(msg);
}
	
void RosComm::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform RosComm::getLastTrasform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
	static tf::TransformListener listener;
	try {
	    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
	    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
	} catch (tf::TransformException& ex) {
	    ROS_ERROR("%s",ex.what());
	}
	return _tf;
}
