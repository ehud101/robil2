
/*
 * RosComm.h
 *
 *  Created on: Thursday, 06. February 2014 04:09PM
 *      Author: autogenerated
 */
#ifndef ROSCOMM_H_
#define ROSCOMM_H_
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <ParameterTypes.h>
#include <tf/tf.h>
class ComponentMain;
class RosComm {
  bool _inited;
  ComponentMain   * _comp;
  ros::NodeHandle _nh;

	ros::Publisher  _pub_Sensor_SICK_1;
	ros::Publisher  _pub_Sensor_SICK_2;
	ros::Publisher  _pub_Sensor_IBEO_1;
	ros::Publisher  _pub_Sensor_IBEO_2;
	ros::Publisher  _pub_Sensor_IBEO_3;
	ros::Publisher  _pub_Sensor_IBEO_4;
	ros::Publisher  _pub_Sensor_CAM_R;
	ros::Publisher  _pub_Sensor_CAM_L;
	ros::Publisher  _pub_Sensor_WIRE;
	ros::Publisher  _pub_Sensor_GPS;
	ros::Publisher  _pub_Sensor_INS;

  bool init(int argc,char** argv);
public:
	RosComm(ComponentMain* comp,int argc,char** argv);
	virtual ~RosComm();

	void publishSensor_SICK_1( config::SENSORS::pub::Sensor_SICK_1 &msg);
	void publishSensor_SICK_2( config::SENSORS::pub::Sensor_SICK_2 &msg);
	void publishSensor_IBEO_1( config::SENSORS::pub::Sensor_IBEO_1 &msg);
	void publishSensor_IBEO_2( config::SENSORS::pub::Sensor_IBEO_2 &msg);
	void publishSensor_IBEO_3( config::SENSORS::pub::Sensor_IBEO_3 &msg);
	void publishSensor_IBEO_4( config::SENSORS::pub::Sensor_IBEO_4 &msg);
	void publishSensor_CAM_R( config::SENSORS::pub::Sensor_CAM_R &msg);
	void publishSensor_CAM_L( config::SENSORS::pub::Sensor_CAM_L &msg);
	void publishSensor_WIRE( config::SENSORS::pub::Sensor_WIRE &msg);
	void publishSensor_GPS( config::SENSORS::pub::Sensor_GPS &msg);
	void publishSensor_INS( config::SENSORS::pub::Sensor_INS &msg);

  void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
  tf::StampedTransform getLastTrasform(std::string srcFrame, std::string distFrame);
};
#endif /* ROSCOMM_H_ */
