
/*
 * RosComm.h
 *
 *  Created on: Sunday, 02. February 2014 03:25PM
 *      Author: autogenerated
 */
#ifndef ROSCOMM_H_
#define ROSCOMM_H_
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <ParameterTypes.h>
#include <tf/tf.h>
class ComponentMain;
class RosComm {
  bool _inited;
  ComponentMain   * _comp;
  ros::NodeHandle _nh;
	ros::Subscriber _sub_Speed;
	ros::Subscriber _sub_TrottleEffort;
	ros::Subscriber _sub_SteeringEffort;
	ros::Subscriber _sub_JointsEffort;
	ros::Subscriber _sub_Teleoperation;
	ros::Publisher  _pub_TrottleEffort;
	ros::Publisher  _pub_SteeringEffort;
	ros::Publisher  _pub_JointsEffort;

  bool init(int argc,char** argv);
public:
	RosComm(ComponentMain* comp,int argc,char** argv);
	virtual ~RosComm();
	void SpeedCallback(const config::LLC::sub::Speed::ConstPtr &msg);
	void TrottleEffortCallback(const config::LLC::sub::TrottleEffort::ConstPtr &msg);
	void SteeringEffortCallback(const config::LLC::sub::SteeringEffort::ConstPtr &msg);
	void JointsEffortCallback(const config::LLC::sub::JointsEffort::ConstPtr &msg);
	void TeleoperationCallback(const config::LLC::sub::Teleoperation::ConstPtr &msg);
	void publishTrottleEffort( config::LLC::pub::TrottleEffort &msg);
	void publishSteeringEffort( config::LLC::pub::SteeringEffort &msg);
	void publishJointsEffort( config::LLC::pub::JointsEffort &msg);

  void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
  tf::StampedTransform getLastTrasform(std::string srcFrame, std::string distFrame);
};
#endif /* ROSCOMM_H_ */
