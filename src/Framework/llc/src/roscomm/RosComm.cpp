
/*
 * RosComm.cpp
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{
	_sub_WSMSpeed=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LLC","WSMSpeed","sub"), 10, &RosComm::WSMSpeedCallback,this));
	_sub_BladePositionCommand=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LLC","BladePositionCommand","sub"), 10, &RosComm::BladePositionCommandCallback,this));
	_sub_WPDSpeed=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LLC","WPDSpeed","sub"), 10, &RosComm::WPDSpeedCallback,this));
	_sub_Odometry=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LLC","Odometry","sub"), 10, &RosComm::OdometryCallback,this));
	_sub_LLCCommand=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LLC","LLCCommand","sub"), 10, &RosComm::LLCCommandCallback,this));
	_sub_TeleoperationControlMode=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LLC","TeleoperationControlMode","sub"), 10, &RosComm::TeleoperationControlModeCallback,this));
	_sub_TeleoperationThrottle=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LLC","TeleoperationThrottle","sub"), 10, &RosComm::TeleoperationThrottleCallback,this));
	_sub_TeleoperationSteering=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LLC","TeleoperationSteering","sub"), 10, &RosComm::TeleoperationSteeringCallback,this));
	_sub_TeleoperationJoints=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"LLC","TeleoperationJoints","sub"), 10, &RosComm::TeleoperationJointsCallback,this));
	_pub_TrottleEffort=ros::Publisher(_nh.advertise<config::LLC::pub::TrottleEffort>(fetchParam(&_nh,"LLC","TrottleEffort","pub"),10));
	_pub_SteeringEffort=ros::Publisher(_nh.advertise<config::LLC::pub::SteeringEffort>(fetchParam(&_nh,"LLC","SteeringEffort","pub"),10));
	_pub_JointsEffort=ros::Publisher(_nh.advertise<config::LLC::pub::JointsEffort>(fetchParam(&_nh,"LLC","JointsEffort","pub"),10));
	_pub_LLCPlatformState=ros::Publisher(_nh.advertise<config::LLC::pub::LLCPlatformState>(fetchParam(&_nh,"LLC","LLCPlatformState","pub"),10));
	_pub_LLCComponentState=ros::Publisher(_nh.advertise<config::LLC::pub::LLCComponentState>(fetchParam(&_nh,"LLC","LLCComponentState","pub"),10));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"LLC_node");
	return true;
}


void RosComm::WSMSpeedCallback(const config::LLC::sub::WSMSpeed::ConstPtr &msg)
{
	_comp->handleWSMSpeed(*msg);
}
	

void RosComm::BladePositionCommandCallback(const config::LLC::sub::BladePositionCommand::ConstPtr &msg)
{
	_comp->handleBladePositionCommand(*msg);
}
	

void RosComm::WPDSpeedCallback(const config::LLC::sub::WPDSpeed::ConstPtr &msg)
{
	_comp->handleWPDSpeed(*msg);
}
	

void RosComm::OdometryCallback(const config::LLC::sub::Odometry::ConstPtr &msg)
{
	_comp->handleOdometry(*msg);
}
	

void RosComm::LLCCommandCallback(const config::LLC::sub::LLCCommand::ConstPtr &msg)
{
	_comp->handleLLCCommand(*msg);
}
	

void RosComm::TeleoperationControlModeCallback(const config::LLC::sub::TeleoperationControlMode::ConstPtr &msg)
{
	_comp->handleTeleoperationControlMode(*msg);
}
	

void RosComm::TeleoperationThrottleCallback(const config::LLC::sub::TeleoperationThrottle::ConstPtr &msg)
{
	_comp->handleTeleoperationThrottle(*msg);
}
	

void RosComm::TeleoperationSteeringCallback(const config::LLC::sub::TeleoperationSteering::ConstPtr &msg)
{
	_comp->handleTeleoperationSteering(*msg);
}
	

void RosComm::TeleoperationJointsCallback(const config::LLC::sub::TeleoperationJoints::ConstPtr &msg)
{
	_comp->handleTeleoperationJoints(*msg);
}
	

void RosComm::publishTrottleEffort( config::LLC::pub::TrottleEffort &msg)
{
	_pub_TrottleEffort.publish(msg);
}
	

void RosComm::publishSteeringEffort( config::LLC::pub::SteeringEffort &msg)
{
	_pub_SteeringEffort.publish(msg);
}
	

void RosComm::publishJointsEffort( config::LLC::pub::JointsEffort &msg)
{
	_pub_JointsEffort.publish(msg);
}
	

void RosComm::publishLLCPlatformState( config::LLC::pub::LLCPlatformState &msg)
{
	_pub_LLCPlatformState.publish(msg);
}
	

void RosComm::publishLLCComponentState( config::LLC::pub::LLCComponentState &msg)
{
	_pub_LLCComponentState.publish(msg);
}
	
void RosComm::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform RosComm::getLastTrasform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
	static tf::TransformListener listener;
	try {
	    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
	    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
	} catch (tf::TransformException& ex) {
	    ROS_ERROR("%s",ex.what());
	}
	return _tf;
}
