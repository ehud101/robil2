
/*
 * ComponentMain.cpp
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include "../roscomm/RosComm.h"
ComponentMain::ComponentMain(int argc,char** argv)
{
	_roscomm = new RosComm(this,argc, argv);
}
ComponentMain::~ComponentMain() {
	if(_roscomm) delete _roscomm; _roscomm=0;
}

void ComponentMain::handleWSMSpeed(const config::LLC::sub::WSMSpeed& msg)
{
	std::cout<< "LLC say:" << msg << std::endl;
}
	

void ComponentMain::handleBladePositionCommand(const config::LLC::sub::BladePositionCommand& msg)
{
	std::cout<< "LLC say:" << msg << std::endl;
}
	

void ComponentMain::handleWPDSpeed(const config::LLC::sub::WPDSpeed& msg)
{
	std::cout<< "LLC say:" << msg << std::endl;
}
	

void ComponentMain::handleOdometry(const config::LLC::sub::Odometry& msg)
{
	std::cout<< "LLC say:" << msg << std::endl;
}
	

void ComponentMain::handleLLCCommand(const config::LLC::sub::LLCCommand& msg)
{
	std::cout<< "LLC say:" << msg << std::endl;
}
	

void ComponentMain::handleTeleoperationControlMode(const config::LLC::sub::TeleoperationControlMode& msg)
{
	std::cout<< "LLC say:" << msg << std::endl;
}
	

void ComponentMain::handleTeleoperationThrottle(const config::LLC::sub::TeleoperationThrottle& msg)
{
	std::cout<< "LLC say:" << msg << std::endl;
}
	

void ComponentMain::handleTeleoperationSteering(const config::LLC::sub::TeleoperationSteering& msg)
{
	std::cout<< "LLC say:" << msg << std::endl;
}
	

void ComponentMain::handleTeleoperationJoints(const config::LLC::sub::TeleoperationJoints& msg)
{
	std::cout<< "LLC say:" << msg << std::endl;
}
	

void ComponentMain::publishTrottleEffort(config::LLC::pub::TrottleEffort& msg)
{
	_roscomm->publishTrottleEffort(msg);
}
	

void ComponentMain::publishSteeringEffort(config::LLC::pub::SteeringEffort& msg)
{
	_roscomm->publishSteeringEffort(msg);
}
	

void ComponentMain::publishJointsEffort(config::LLC::pub::JointsEffort& msg)
{
	_roscomm->publishJointsEffort(msg);
}
	

void ComponentMain::publishLLCPlatformState(config::LLC::pub::LLCPlatformState& msg)
{
	_roscomm->publishLLCPlatformState(msg);
}
	

void ComponentMain::publishLLCComponentState(config::LLC::pub::LLCComponentState& msg)
{
	_roscomm->publishLLCComponentState(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	_roscomm->publishTransform(_tf, srcFrame, distFrame);
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame){
	return _roscomm->getLastTrasform(srcFrame, distFrame);;
}
