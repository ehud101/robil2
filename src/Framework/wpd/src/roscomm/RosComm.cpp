
/*
 * RosComm.cpp
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{
	_sub_MiniMap=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WPD","MiniMap","sub"), 10, &RosComm::MiniMapCallback,this));
	_sub_LocalPath=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WPD","LocalPath","sub"), 10, &RosComm::LocalPathCallback,this));
	_sub_MaxSpeed=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WPD","MaxSpeed","sub"), 10, &RosComm::MaxSpeedCallback,this));
	_sub_Odometry=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WPD","Odometry","sub"), 10, &RosComm::OdometryCallback,this));
	_sub_WPDCommand=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WPD","WPDCommand","sub"), 10, &RosComm::WPDCommandCallback,this));
	_pub_WPDSpeed=ros::Publisher(_nh.advertise<config::WPD::pub::WPDSpeed>(fetchParam(&_nh,"WPD","WPDSpeed","pub"),10));
	_pub_WPDDecisions=ros::Publisher(_nh.advertise<config::WPD::pub::WPDDecisions>(fetchParam(&_nh,"WPD","WPDDecisions","pub"),10));
	_pub_WPDState=ros::Publisher(_nh.advertise<config::WPD::pub::WPDState>(fetchParam(&_nh,"WPD","WPDState","pub"),10));
	_pub_WPDComponentState=ros::Publisher(_nh.advertise<config::WPD::pub::WPDComponentState>(fetchParam(&_nh,"WPD","WPDComponentState","pub"),10));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"WPD_node");
	return true;
}


void RosComm::MiniMapCallback(const config::WPD::sub::MiniMap::ConstPtr &msg)
{
	_comp->handleMiniMap(*msg);
}
	

void RosComm::LocalPathCallback(const config::WPD::sub::LocalPath::ConstPtr &msg)
{
	_comp->handleLocalPath(*msg);
}
	

void RosComm::MaxSpeedCallback(const config::WPD::sub::MaxSpeed::ConstPtr &msg)
{
	_comp->handleMaxSpeed(*msg);
}
	

void RosComm::OdometryCallback(const config::WPD::sub::Odometry::ConstPtr &msg)
{
	_comp->handleOdometry(*msg);
}
	

void RosComm::WPDCommandCallback(const config::WPD::sub::WPDCommand::ConstPtr &msg)
{
	_comp->handleWPDCommand(*msg);
}
	

void RosComm::publishWPDSpeed( config::WPD::pub::WPDSpeed &msg)
{
	_pub_WPDSpeed.publish(msg);
}
	

void RosComm::publishWPDDecisions( config::WPD::pub::WPDDecisions &msg)
{
	_pub_WPDDecisions.publish(msg);
}
	

void RosComm::publishWPDState( config::WPD::pub::WPDState &msg)
{
	_pub_WPDState.publish(msg);
}
	

void RosComm::publishWPDComponentState( config::WPD::pub::WPDComponentState &msg)
{
	_pub_WPDComponentState.publish(msg);
}
	
void RosComm::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform RosComm::getLastTrasform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
	static tf::TransformListener listener;
	try {
	    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
	    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
	} catch (tf::TransformException& ex) {
	    ROS_ERROR("%s",ex.what());
	}
	return _tf;
}
