
/*
 * ComponentMain.cpp
 *
 *  Created on: Thursday, 06. February 2014 04:09PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include "../roscomm/RosComm.h"
ComponentMain::ComponentMain(int argc,char** argv)
{
	_roscomm = new RosComm(this,argc, argv);
}
ComponentMain::~ComponentMain() {
	if(_roscomm) delete _roscomm; _roscomm=0;
}

void ComponentMain::handleMiniMap(const config::WPD::sub::MiniMap& msg)
{
	std::cout<< "WPD say:" << msg << std::endl;
}
	

void ComponentMain::handleLocalPath(const config::WPD::sub::LocalPath& msg)
{
	std::cout<< "WPD say:" << msg << std::endl;
}
	

void ComponentMain::handleMaxSpeed(const config::WPD::sub::MaxSpeed& msg)
{
	std::cout<< "WPD say:" << msg << std::endl;
}
	

void ComponentMain::handleOdometry(const config::WPD::sub::Odometry& msg)
{
	std::cout<< "WPD say:" << msg << std::endl;
}
	

void ComponentMain::handleWPDCommand(const config::WPD::sub::WPDCommand& msg)
{
	std::cout<< "WPD say:" << msg << std::endl;
}
	

void ComponentMain::publishWPDSpeed(config::WPD::pub::WPDSpeed& msg)
{
	_roscomm->publishWPDSpeed(msg);
}
	

void ComponentMain::publishWPDDecisions(config::WPD::pub::WPDDecisions& msg)
{
	_roscomm->publishWPDDecisions(msg);
}
	

void ComponentMain::publishWPDState(config::WPD::pub::WPDState& msg)
{
	_roscomm->publishWPDState(msg);
}
	

void ComponentMain::publishWPDComponentState(config::WPD::pub::WPDComponentState& msg)
{
	_roscomm->publishWPDComponentState(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	_roscomm->publishTransform(_tf, srcFrame, distFrame);
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame){
	return _roscomm->getLastTrasform(srcFrame, distFrame);;
}
