
/*
 * ComponentMain.cpp
 *
 *  Created on: Thursday, 27. February 2014 12:29PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include "../roscomm/RosComm.h"
ComponentMain::ComponentMain(int argc,char** argv)
{
	_roscomm = new RosComm(this,argc, argv);
	this->receivedBladePosition = NULL;
	this->receivedWorkSeqData = NULL;
	this->receivedLocation = NULL;
	this->receivedPerVelocity = NULL;
    this->recivedMap = NULL;
	this->new_seq = false ;
	this->task_length = -1 ;
	this->cur_step = -1 ;
	this->ground_heigth = 0;
}
ComponentMain::~ComponentMain() {
	if(_roscomm) delete _roscomm; _roscomm=0;
}

void ComponentMain::handleWorkSeqData(const config::WSM::sub::WorkSeqData& msg)
{
	ROS_INFO("Got sequence with Task id: %s",msg.task_id.c_str());
	if(this->receivedWorkSeqData != NULL){
		delete this->receivedWorkSeqData;
	}
	else{
	//	ROS_INFO("error after");
	}
	this->receivedWorkSeqData = new config::WSM::sub::WorkSeqData(msg);
}
	

void ComponentMain::handleBladePosition(const config::WSM::sub::BladePosition& msg)
{
	if(this->receivedBladePosition != NULL)
		delete this->receivedBladePosition;
	this->receivedBladePosition = new config::WSM::sub::BladePosition(msg);
	//std::cout<< "WSM say:" << msg << std::endl;
}

void ComponentMain::handleLocation(const config::LLC::sub::Location& msg)
{

	if(this->receivedLocation != NULL)
		delete this->receivedLocation;
	this->receivedLocation = new config::LLC::sub::Location(msg);
	//std::cout<< "LLC say:" << msg.pose.pose.position.x << std::endl;
}


void ComponentMain::handlePerVelocity(const config::LLC::sub::PerVelocity& msg)
{

	if(this->receivedPerVelocity != NULL)
		delete this->receivedPerVelocity;
	this->receivedPerVelocity = new config::LLC::sub::PerVelocity(msg);

//	std::cout<< "LLC say:" << msg << std::endl;
}

void ComponentMain::handleMiniMapWSM(const config::WSM::sub::MiniMap& msg)
{

	if(this->recivedMap != NULL){
		delete this->recivedMap ;
	}
		this->recivedMap = new config::WSM::sub::MiniMap(msg);

			double max = 0 ;
		for(int i = 12 ; i < 18 ; i++)
		{
		//	std::cout << "[" << this->recivedMap->data[45*30 + i].height << "]" ;
			if(this->recivedMap->data[45*30 + i].height > max)
			{
				max = this->recivedMap->data[3*30 + i].height;
			}
		}
//	std::cout << std::endl ;
	this->ground_heigth = max;

}


void ComponentMain::publishWSMVelocity(config::WSM::pub::WSMVelocity& msg)
{
	_roscomm->publishWSMVelocity(msg);
}
	

void ComponentMain::publishBladePositionCommand(config::WSM::pub::BladePositionCommand& msg)
{
	_roscomm->publishBladePositionCommand(msg);
}

	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	_roscomm->publishTransform(_tf, srcFrame, distFrame);
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame){
	return _roscomm->getLastTrasform(srcFrame, distFrame);
}
void ComponentMain::publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report){
	_roscomm->publishDiagnostic(_report);
}
void ComponentMain::publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report){
	_roscomm->publishDiagnostic(header, _report);
}
