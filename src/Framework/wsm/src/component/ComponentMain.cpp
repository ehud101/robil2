
/*
 * ComponentMain.cpp
 *
 *  Created on: Monday, 03. February 2014 03:30PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include "../roscomm/RosComm.h"
ComponentMain::ComponentMain(int argc,char** argv)
{
	_roscomm = new RosComm(this,argc, argv);
}
ComponentMain::~ComponentMain() {
	if(_roscomm) delete _roscomm; _roscomm=0;
}

void ComponentMain::handleOdometry(const config::WSM::sub::Odometry& msg)
{
	std::cout<< "WSM say:" << msg << std::endl;
}
	

void ComponentMain::handleBladPosition(const config::WSM::sub::BladPosition& msg)
{
	std::cout<< "WSM say:" << msg << std::endl;
}
	

void ComponentMain::handleWSMCommand(const config::WSM::sub::WSMCommand& msg)
{
	std::cout<< "WSM say:" << msg << std::endl;
}
	

void ComponentMain::handleWSMData(const config::WSM::sub::WSMData& msg)
{
	std::cout<< "WSM say:" << msg << std::endl;
}
	

void ComponentMain::publishBladePositionCommand(config::WSM::pub::BladePositionCommand& msg)
{
	_roscomm->publishBladePositionCommand(msg);
}
	

void ComponentMain::publishWSMSpeed(config::WSM::pub::WSMSpeed& msg)
{
	_roscomm->publishWSMSpeed(msg);
}
	

void ComponentMain::publishWSMExecutionState(config::WSM::pub::WSMExecutionState& msg)
{
	_roscomm->publishWSMExecutionState(msg);
}
	

void ComponentMain::publishWSMComponentState(config::WSM::pub::WSMComponentState& msg)
{
	_roscomm->publishWSMComponentState(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	_roscomm->publishTransform(_tf, srcFrame, distFrame);
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame){
	return _roscomm->getLastTrasform(srcFrame, distFrame);;
}
