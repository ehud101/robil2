
/*
 * RosComm.cpp
 *
 *  Created on: Sunday, 02. February 2014 03:25PM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{
	_sub_ExecuteWorkSequenceCommand=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WSM","ExecuteWorkSequenceCommand","sub"), 10, &RosComm::ExecuteWorkSequenceCommandCallback,this));
	_sub_PosAttVel=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WSM","PosAttVel","sub"), 10, &RosComm::PosAttVelCallback,this));
	_sub_WiresLengths=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WSM","WiresLengths","sub"), 10, &RosComm::WiresLengthsCallback,this));
	_pub_BladePosition=ros::Publisher(_nh.advertise<config::WSM::pub::BladePosition>(fetchParam(&_nh,"WSM","BladePosition","pub"),10));
	_pub_TrottleEffort=ros::Publisher(_nh.advertise<config::WSM::pub::TrottleEffort>(fetchParam(&_nh,"WSM","TrottleEffort","pub"),10));
	_pub_SteeringEffort=ros::Publisher(_nh.advertise<config::WSM::pub::SteeringEffort>(fetchParam(&_nh,"WSM","SteeringEffort","pub"),10));
	_pub_JointsEffort=ros::Publisher(_nh.advertise<config::WSM::pub::JointsEffort>(fetchParam(&_nh,"WSM","JointsEffort","pub"),10));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"WSM_node");
	return true;
}


void RosComm::ExecuteWorkSequenceCommandCallback(const config::WSM::sub::ExecuteWorkSequenceCommand::ConstPtr &msg)
{
	_comp->handleExecuteWorkSequenceCommand(*msg);
}
	

void RosComm::PosAttVelCallback(const config::WSM::sub::PosAttVel::ConstPtr &msg)
{
	_comp->handlePosAttVel(*msg);
}
	

void RosComm::WiresLengthsCallback(const config::WSM::sub::WiresLengths::ConstPtr &msg)
{
	_comp->handleWiresLengths(*msg);
}
	

void RosComm::publishBladePosition( config::WSM::pub::BladePosition &msg)
{
	_pub_BladePosition.publish(msg);
}
	

void RosComm::publishTrottleEffort( config::WSM::pub::TrottleEffort &msg)
{
	_pub_TrottleEffort.publish(msg);
}
	

void RosComm::publishSteeringEffort( config::WSM::pub::SteeringEffort &msg)
{
	_pub_SteeringEffort.publish(msg);
}
	

void RosComm::publishJointsEffort( config::WSM::pub::JointsEffort &msg)
{
	_pub_JointsEffort.publish(msg);
}
	
void RosComm::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform RosComm::getLastTrasform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
	static tf::TransformListener listener;
	try {
	    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
	    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
	} catch (tf::TransformException& ex) {
	    ROS_ERROR("%s",ex.what());
	}
	return _tf;
}
