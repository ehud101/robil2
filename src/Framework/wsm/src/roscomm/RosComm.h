
/*
 * RosComm.h
 *
 *  Created on: Thursday, 06. February 2014 04:09PM
 *      Author: autogenerated
 */
#ifndef ROSCOMM_H_
#define ROSCOMM_H_
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <ParameterTypes.h>
#include <tf/tf.h>
class ComponentMain;
class RosComm {
  bool _inited;
  ComponentMain   * _comp;
  ros::NodeHandle _nh;
	ros::Subscriber _sub_Odometry;
	ros::Subscriber _sub_BladPosition;
	ros::Subscriber _sub_WSMCommand;
	ros::Subscriber _sub_WSMData;
	ros::Publisher  _pub_BladePositionCommand;
	ros::Publisher  _pub_WSMSpeed;
	ros::Publisher  _pub_WSMExecutionState;
	ros::Publisher  _pub_WSMComponentState;

  bool init(int argc,char** argv);
public:
	RosComm(ComponentMain* comp,int argc,char** argv);
	virtual ~RosComm();
	void OdometryCallback(const config::WSM::sub::Odometry::ConstPtr &msg);
	void BladPositionCallback(const config::WSM::sub::BladPosition::ConstPtr &msg);
	void WSMCommandCallback(const config::WSM::sub::WSMCommand::ConstPtr &msg);
	void WSMDataCallback(const config::WSM::sub::WSMData::ConstPtr &msg);
	void publishBladePositionCommand( config::WSM::pub::BladePositionCommand &msg);
	void publishWSMSpeed( config::WSM::pub::WSMSpeed &msg);
	void publishWSMExecutionState( config::WSM::pub::WSMExecutionState &msg);
	void publishWSMComponentState( config::WSM::pub::WSMComponentState &msg);

  void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
  tf::StampedTransform getLastTrasform(std::string srcFrame, std::string distFrame);
};
#endif /* ROSCOMM_H_ */
